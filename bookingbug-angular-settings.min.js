(function(){"use strict";angular.module("BBAdminSettings",["BB","BBAdmin.Services","BBAdmin.Filters","BBAdmin.Controllers","trNgGrid"]),angular.module("BBAdminSettings").config(function($logProvider){return $logProvider.debugEnabled(!0)}),angular.module("BBAdminSettingsMockE2E",["BBAdminSettings","BBAdminMockE2E"])}).call(this),function(){angular.module("BBAdmin.Services").factory("AdminAdministratorService",function($q,BBModel){return{query:function(params){var company,defer;return company=params.company,defer=$q.defer(),company.$get("administrators").then(function(collection){return collection.$get("administrators").then(function(administrators){var a,models;return models=function(){var i,len,results;for(results=[],i=0,len=administrators.length;len>i;i++)a=administrators[i],results.push(new BBModel.Admin.Administrator(a));return results}(),defer.resolve(models)},function(err){return defer.reject(err)})},function(err){return defer.reject(err)}),defer.promise}}})}.call(this),function(){angular.module("BBAdminSettings").directive("adminTable",function(AdminCompanyService,AdminAdministratorService,$modal,$log,ModalForm){var controller,link;return controller=function($scope){return $scope.getAdministrators=function(){var params;return params={company:$scope.company},AdminAdministratorService.query(params).then(function(administrators){return $scope.admin_models=administrators,$scope.administrators=_.map(administrators,function(administrator){return _.pick(administrator,"id","name","email","role")})})},$scope.newAdministrator=function(){return ModalForm["new"]({company:$scope.company,title:"New Administrator",new_rel:"new_administrator",post_rel:"administrators",success:function(administrator){return $scope.administrators.push(administrator)}})},$scope.edit=function(id){var admin;return admin=_.find($scope.admin_models,function(p){return p.id===id}),ModalForm.edit({model:admin,title:"Edit Administrator"})}},link=function(scope,element,attrs){return scope.company?scope.getAdministrators():AdminCompanyService.query(attrs).then(function(company){return scope.company=company,scope.getAdministrators()})},{controller:controller,link:link,templateUrl:"admin_table_main.html"}})}.call(this),function(){"use strict";var extend=function(child,parent){function ctor(){this.constructor=child}for(var key in parent)hasProp.call(parent,key)&&(child[key]=parent[key]);return ctor.prototype=parent.prototype,child.prototype=new ctor,child.__super__=parent.prototype,child},hasProp={}.hasOwnProperty;angular.module("BB.Models").factory("Admin.AdministratorModel",function($q,BBModel,BaseModel){var Admin_Administrator;return Admin_Administrator=function(superClass){function Admin_Administrator(data){Admin_Administrator.__super__.constructor.call(this,data)}return extend(Admin_Administrator,superClass),Admin_Administrator}(BaseModel)})}.call(this),function(){"use strict";var extend=function(child,parent){function ctor(){this.constructor=child}for(var key in parent)hasProp.call(parent,key)&&(child[key]=parent[key]);return ctor.prototype=parent.prototype,child.prototype=new ctor,child.__super__=parent.prototype,child},hasProp={}.hasOwnProperty;angular.module("BB.Models").factory("Admin.UserModel",function($q,BBModel,BaseModel){var Admin_User;return Admin_User=function(superClass){function Admin_User(data){Admin_User.__super__.constructor.call(this,data),this.companies=[],data&&this.$has("companies")&&this.$get("companies").then(function(_this){return function(comps){return _this.companies=comps}}(this))}return extend(Admin_User,superClass),Admin_User}(BaseModel)})}.call(this);