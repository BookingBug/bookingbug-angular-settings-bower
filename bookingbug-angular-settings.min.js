"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}angular.module("BBAdminSettings",["BB","BBAdmin.Services","BBAdmin.Filters","BBAdmin.Controllers","trNgGrid"]),angular.module("BBAdminSettingsMockE2E",["BBAdminSettings","BBAdminMockE2E"]),angular.module("BBAdminSettings").config(function($logProvider){"ngInject";$logProvider.debugEnabled(!0)}),angular.module("BBAdminSettings").directive("adminTable",function($log,ModalForm,BBModel){return{controller:function($scope){return $scope.getAdministrators=function(){var params={company:$scope.company};return BBModel.Admin.Administrator.$query(params).then(function(administrators){return $scope.admin_models=administrators,$scope.administrators=_.map(administrators,function(administrator){return _.pick(administrator,"id","name","email","role")})})},$scope.newAdministrator=function(){return ModalForm.new({company:$scope.company,title:"New Administrator",new_rel:"new_administrator",post_rel:"administrators",success:function(administrator){return $scope.administrators.push(administrator)}})},$scope.edit=function(id){var admin=_.find($scope.admin_models,function(p){return p.id===id});return ModalForm.edit({model:admin,title:"Edit Administrator"})}},link:function(scope,element,attrs){return scope.company?scope.getAdministrators():BBModel.Admin.Company.$query(attrs).then(function(company){return scope.company=company,scope.getAdministrators()})},templateUrl:"admin-table/admin_table_main.html"}}),angular.module("BB.Models").factory("Admin.AdministratorModel",function($q,AdminAdministratorService,BBModel,BaseModel){return function(_BaseModel){function Admin_Administrator(data){return _classCallCheck(this,Admin_Administrator),_possibleConstructorReturn(this,_BaseModel.call(this,data))}return _inherits(Admin_Administrator,_BaseModel),Admin_Administrator.$query=function(params){return AdminAdministratorService.query(params)},Admin_Administrator}(BaseModel)}),angular.module("BB.Models").factory("Admin.UserModel",function($q,BBModel,BaseModel){return function(_BaseModel){function Admin_User(data){_classCallCheck(this,Admin_User);var _this=_possibleConstructorReturn(this,_BaseModel.call(this,data));return _this.companies=[],data&&_this.$has("companies")&&_this.$get("companies").then(function(comps){return _this.companies=comps}),_this}return _inherits(Admin_User,_BaseModel),Admin_User}(BaseModel)}),angular.module("BBAdmin.Services").factory("AdminAdministratorService",function($q,BBModel){return{query:function(params){var company=params.company,defer=$q.defer();return company.$get("administrators").then(function(collection){return collection.$get("administrators").then(function(administrators){var models=Array.from(administrators).map(function(a){return new BBModel.Admin.Administrator(a)});return defer.resolve(models)},function(err){return defer.reject(err)})},function(err){return defer.reject(err)}),defer.promise}}}),angular.module("BBAdminSettings").config(function($translateProvider){"ngInject";var translations={SETTINGS:{ADMIN_TABLE:{NEW_ADMINISTRATOR:"New Administrator",EDIT:"@:COMMON.BTN.EDIT"},ADMIN_FORM:{OK_BTN:"@:COMMON.BTN.OK",CANCEL_BTN:"@:COMMON.BTN.CANCEL"}}};$translateProvider.translations("en",translations)});